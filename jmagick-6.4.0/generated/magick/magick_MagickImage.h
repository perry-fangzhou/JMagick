/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class magick_MagickImage */

#ifndef _Included_magick_MagickImage
#define _Included_magick_MagickImage
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     magick_MagickImage
 * Method:    initMultiImage
 * Signature: ([Lmagick/MagickImage;)V
 */
JNIEXPORT void JNICALL Java_magick_MagickImage_initMultiImage
  (JNIEnv *, jobject, jobjectArray);

/*
 * Class:     magick_MagickImage
 * Method:    pingImage
 * Signature: (Lmagick/ImageInfo;)V
 */
JNIEXPORT void JNICALL Java_magick_MagickImage_pingImage
  (JNIEnv *, jobject, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    allocateImage
 * Signature: (Lmagick/ImageInfo;)V
 */
JNIEXPORT void JNICALL Java_magick_MagickImage_allocateImage
  (JNIEnv *, jobject, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    readImage
 * Signature: (Lmagick/ImageInfo;)V
 */
JNIEXPORT void JNICALL Java_magick_MagickImage_readImage
  (JNIEnv *, jobject, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    writeImage
 * Signature: (Lmagick/ImageInfo;)Z
 */
JNIEXPORT jboolean JNICALL Java_magick_MagickImage_writeImage
  (JNIEnv *, jobject, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    getFileName
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_magick_MagickImage_getFileName
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    setFileName
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_magick_MagickImage_setFileName
  (JNIEnv *, jobject, jstring);

/*
 * Class:     magick_MagickImage
 * Method:    setFilter
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_magick_MagickImage_setFilter
  (JNIEnv *, jobject, jint);

/*
 * Class:     magick_MagickImage
 * Method:    getFilter
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_magick_MagickImage_getFilter
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    addNoiseImage
 * Signature: (I)Lmagick/MagickImage;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_addNoiseImage
  (JNIEnv *, jobject, jint);

/*
 * Class:     magick_MagickImage
 * Method:    getDimension
 * Signature: ()Ljava/awt/Dimension;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_getDimension
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    getDepth
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_magick_MagickImage_getDepth
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    setDepth
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_magick_MagickImage_setDepth
  (JNIEnv *, jobject, jint);

/*
 * Class:     magick_MagickImage
 * Method:    blurImage
 * Signature: (DD)Lmagick/MagickImage;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_blurImage
  (JNIEnv *, jobject, jdouble, jdouble);

/*
 * Class:     magick_MagickImage
 * Method:    blurImageChannel
 * Signature: (IDD)Lmagick/MagickImage;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_blurImageChannel
  (JNIEnv *, jobject, jint, jdouble, jdouble);

/*
 * Class:     magick_MagickImage
 * Method:    trimImage
 * Signature: ()Lmagick/MagickImage;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_trimImage
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    getStorageClass
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_magick_MagickImage_getStorageClass
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    annotateImage
 * Signature: (Lmagick/DrawInfo;)V
 */
JNIEXPORT void JNICALL Java_magick_MagickImage_annotateImage
  (JNIEnv *, jobject, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    borderImage
 * Signature: (Ljava/awt/Rectangle;)Lmagick/MagickImage;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_borderImage
  (JNIEnv *, jobject, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    charcoalImage
 * Signature: (DD)Lmagick/MagickImage;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_charcoalImage
  (JNIEnv *, jobject, jdouble, jdouble);

/*
 * Class:     magick_MagickImage
 * Method:    raiseImage
 * Signature: (Ljava/awt/Rectangle;Z)Z
 */
JNIEXPORT jboolean JNICALL Java_magick_MagickImage_raiseImage
  (JNIEnv *, jobject, jobject, jboolean);

/*
 * Class:     magick_MagickImage
 * Method:    chopImage
 * Signature: (Ljava/awt/Rectangle;)Lmagick/MagickImage;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_chopImage
  (JNIEnv *, jobject, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    colorizeImage
 * Signature: (Ljava/lang/String;Lmagick/PixelPacket;)Lmagick/MagickImage;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_colorizeImage
  (JNIEnv *, jobject, jstring, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    compositeImage
 * Signature: (ILmagick/MagickImage;II)Z
 */
JNIEXPORT jboolean JNICALL Java_magick_MagickImage_compositeImage
  (JNIEnv *, jobject, jint, jobject, jint, jint);

/*
 * Class:     magick_MagickImage
 * Method:    contrastImage
 * Signature: (Z)Z
 */
JNIEXPORT jboolean JNICALL Java_magick_MagickImage_contrastImage
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     magick_MagickImage
 * Method:    cloneImage
 * Signature: (IIZ)Lmagick/MagickImage;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_cloneImage
  (JNIEnv *, jobject, jint, jint, jboolean);

/*
 * Class:     magick_MagickImage
 * Method:    constituteImage
 * Signature: (IILjava/lang/String;[B)V
 */
JNIEXPORT void JNICALL Java_magick_MagickImage_constituteImage__IILjava_lang_String_2_3B
  (JNIEnv *, jobject, jint, jint, jstring, jbyteArray);

/*
 * Class:     magick_MagickImage
 * Method:    constituteImage
 * Signature: (IILjava/lang/String;[I)V
 */
JNIEXPORT void JNICALL Java_magick_MagickImage_constituteImage__IILjava_lang_String_2_3I
  (JNIEnv *, jobject, jint, jint, jstring, jintArray);

/*
 * Class:     magick_MagickImage
 * Method:    constituteImage
 * Signature: (IILjava/lang/String;[F)V
 */
JNIEXPORT void JNICALL Java_magick_MagickImage_constituteImage__IILjava_lang_String_2_3F
  (JNIEnv *, jobject, jint, jint, jstring, jfloatArray);

/*
 * Class:     magick_MagickImage
 * Method:    cropImage
 * Signature: (Ljava/awt/Rectangle;)Lmagick/MagickImage;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_cropImage
  (JNIEnv *, jobject, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    cycleColormapImage
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_magick_MagickImage_cycleColormapImage
  (JNIEnv *, jobject, jint);

/*
 * Class:     magick_MagickImage
 * Method:    destroyImages
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_magick_MagickImage_destroyImages
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    drawImage
 * Signature: (Lmagick/DrawInfo;)Z
 */
JNIEXPORT jboolean JNICALL Java_magick_MagickImage_drawImage
  (JNIEnv *, jobject, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    edgeImage
 * Signature: (D)Lmagick/MagickImage;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_edgeImage
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     magick_MagickImage
 * Method:    embossImage
 * Signature: (DD)Lmagick/MagickImage;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_embossImage
  (JNIEnv *, jobject, jdouble, jdouble);

/*
 * Class:     magick_MagickImage
 * Method:    enhanceImage
 * Signature: ()Lmagick/MagickImage;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_enhanceImage
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    equalizeImage
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_magick_MagickImage_equalizeImage
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    flipImage
 * Signature: ()Lmagick/MagickImage;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_flipImage
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    flopImage
 * Signature: ()Lmagick/MagickImage;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_flopImage
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    gammaImage
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_magick_MagickImage_gammaImage
  (JNIEnv *, jobject, jstring);

/*
 * Class:     magick_MagickImage
 * Method:    gaussianBlurImage
 * Signature: (DD)Lmagick/MagickImage;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_gaussianBlurImage
  (JNIEnv *, jobject, jdouble, jdouble);

/*
 * Class:     magick_MagickImage
 * Method:    implodeImage
 * Signature: (D)Lmagick/MagickImage;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_implodeImage
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     magick_MagickImage
 * Method:    isGrayImage
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_magick_MagickImage_isGrayImage
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    isMonochromeImage
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_magick_MagickImage_isMonochromeImage
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    magnifyImage
 * Signature: ()Lmagick/MagickImage;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_magnifyImage
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    matteFloodfillImage
 * Signature: (Lmagick/PixelPacket;IIII)Z
 */
JNIEXPORT jboolean JNICALL Java_magick_MagickImage_matteFloodfillImage
  (JNIEnv *, jobject, jobject, jint, jint, jint, jint);

/*
 * Class:     magick_MagickImage
 * Method:    colorFloodfillImage
 * Signature: (Lmagick/DrawInfo;Lmagick/PixelPacket;III)Z
 */
JNIEXPORT jboolean JNICALL Java_magick_MagickImage_colorFloodfillImage
  (JNIEnv *, jobject, jobject, jobject, jint, jint, jint);

/*
 * Class:     magick_MagickImage
 * Method:    medianFilterImage
 * Signature: (D)Lmagick/MagickImage;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_medianFilterImage
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     magick_MagickImage
 * Method:    minifyImage
 * Signature: ()Lmagick/MagickImage;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_minifyImage
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    modulateImage
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_magick_MagickImage_modulateImage
  (JNIEnv *, jobject, jstring);

/*
 * Class:     magick_MagickImage
 * Method:    negateImage
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_magick_MagickImage_negateImage
  (JNIEnv *, jobject, jint);

/*
 * Class:     magick_MagickImage
 * Method:    normalizeImage
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_magick_MagickImage_normalizeImage
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    oilPaintImage
 * Signature: (D)Lmagick/MagickImage;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_oilPaintImage
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     magick_MagickImage
 * Method:    opaqueImage
 * Signature: (Lmagick/PixelPacket;Lmagick/PixelPacket;)Z
 */
JNIEXPORT jboolean JNICALL Java_magick_MagickImage_opaqueImage
  (JNIEnv *, jobject, jobject, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    reduceNoiseImage
 * Signature: (D)Lmagick/MagickImage;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_reduceNoiseImage
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     magick_MagickImage
 * Method:    rgbTransformImage
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_magick_MagickImage_rgbTransformImage
  (JNIEnv *, jobject, jint);

/*
 * Class:     magick_MagickImage
 * Method:    rollImage
 * Signature: (II)Lmagick/MagickImage;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_rollImage
  (JNIEnv *, jobject, jint, jint);

/*
 * Class:     magick_MagickImage
 * Method:    sampleImage
 * Signature: (II)Lmagick/MagickImage;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_sampleImage
  (JNIEnv *, jobject, jint, jint);

/*
 * Class:     magick_MagickImage
 * Method:    scaleImage
 * Signature: (II)Lmagick/MagickImage;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_scaleImage
  (JNIEnv *, jobject, jint, jint);

/*
 * Class:     magick_MagickImage
 * Method:    segmentImage
 * Signature: (IDD)I
 */
JNIEXPORT jint JNICALL Java_magick_MagickImage_segmentImage
  (JNIEnv *, jobject, jint, jdouble, jdouble);

/*
 * Class:     magick_MagickImage
 * Method:    solarizeImage
 * Signature: (D)V
 */
JNIEXPORT void JNICALL Java_magick_MagickImage_solarizeImage
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     magick_MagickImage
 * Method:    sortColormapByIntensity
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_magick_MagickImage_sortColormapByIntensity
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    spreadImage
 * Signature: (I)Lmagick/MagickImage;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_spreadImage
  (JNIEnv *, jobject, jint);

/*
 * Class:     magick_MagickImage
 * Method:    swirlImage
 * Signature: (D)Lmagick/MagickImage;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_swirlImage
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     magick_MagickImage
 * Method:    syncImage
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_magick_MagickImage_syncImage
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    textureImage
 * Signature: (Lmagick/MagickImage;)V
 */
JNIEXPORT void JNICALL Java_magick_MagickImage_textureImage
  (JNIEnv *, jobject, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    thresholdImage
 * Signature: (D)Z
 */
JNIEXPORT jboolean JNICALL Java_magick_MagickImage_thresholdImage
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     magick_MagickImage
 * Method:    transformImage
 * Signature: (Ljava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_magick_MagickImage_transformImage
  (JNIEnv *, jobject, jstring, jstring);

/*
 * Class:     magick_MagickImage
 * Method:    transformRgbImage
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_magick_MagickImage_transformRgbImage
  (JNIEnv *, jobject, jint);

/*
 * Class:     magick_MagickImage
 * Method:    transparentImage
 * Signature: (Lmagick/PixelPacket;I)Z
 */
JNIEXPORT jboolean JNICALL Java_magick_MagickImage_transparentImage
  (JNIEnv *, jobject, jobject, jint);

/*
 * Class:     magick_MagickImage
 * Method:    unsharpMaskImage
 * Signature: (DDDD)Lmagick/MagickImage;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_unsharpMaskImage
  (JNIEnv *, jobject, jdouble, jdouble, jdouble, jdouble);

/*
 * Class:     magick_MagickImage
 * Method:    waveImage
 * Signature: (DD)Lmagick/MagickImage;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_waveImage
  (JNIEnv *, jobject, jdouble, jdouble);

/*
 * Class:     magick_MagickImage
 * Method:    zoomImage
 * Signature: (II)Lmagick/MagickImage;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_zoomImage
  (JNIEnv *, jobject, jint, jint);

/*
 * Class:     magick_MagickImage
 * Method:    dispatchImage
 * Signature: (IIIILjava/lang/String;[B)Z
 */
JNIEXPORT jboolean JNICALL Java_magick_MagickImage_dispatchImage__IIIILjava_lang_String_2_3B
  (JNIEnv *, jobject, jint, jint, jint, jint, jstring, jbyteArray);

/*
 * Class:     magick_MagickImage
 * Method:    dispatchImage
 * Signature: (IIIILjava/lang/String;[I)Z
 */
JNIEXPORT jboolean JNICALL Java_magick_MagickImage_dispatchImage__IIIILjava_lang_String_2_3I
  (JNIEnv *, jobject, jint, jint, jint, jint, jstring, jintArray);

/*
 * Class:     magick_MagickImage
 * Method:    dispatchImage
 * Signature: (IIIILjava/lang/String;[F)Z
 */
JNIEXPORT jboolean JNICALL Java_magick_MagickImage_dispatchImage__IIIILjava_lang_String_2_3F
  (JNIEnv *, jobject, jint, jint, jint, jint, jstring, jfloatArray);

/*
 * Class:     magick_MagickImage
 * Method:    getMagick
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_magick_MagickImage_getMagick
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    setMagick
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_magick_MagickImage_setMagick
  (JNIEnv *, jobject, jstring);

/*
 * Class:     magick_MagickImage
 * Method:    getNumberColors
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_magick_MagickImage_getNumberColors
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    setNumberColors
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_magick_MagickImage_setNumberColors
  (JNIEnv *, jobject, jint);

/*
 * Class:     magick_MagickImage
 * Method:    isAnimatedImage
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_magick_MagickImage_isAnimatedImage
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    rotateImage
 * Signature: (D)Lmagick/MagickImage;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_rotateImage
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     magick_MagickImage
 * Method:    shearImage
 * Signature: (DD)Lmagick/MagickImage;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_shearImage
  (JNIEnv *, jobject, jdouble, jdouble);

/*
 * Class:     magick_MagickImage
 * Method:    quantizeImage
 * Signature: (Lmagick/QuantizeInfo;)Z
 */
JNIEXPORT jboolean JNICALL Java_magick_MagickImage_quantizeImage
  (JNIEnv *, jobject, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    getColorspace
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_magick_MagickImage_getColorspace
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    sharpenImage
 * Signature: (DD)Lmagick/MagickImage;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_sharpenImage
  (JNIEnv *, jobject, jdouble, jdouble);

/*
 * Class:     magick_MagickImage
 * Method:    despeckleImage
 * Signature: ()Lmagick/MagickImage;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_despeckleImage
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    convolveImage
 * Signature: (I[D)Lmagick/MagickImage;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_convolveImage
  (JNIEnv *, jobject, jint, jdoubleArray);

/*
 * Class:     magick_MagickImage
 * Method:    getImageAttribute
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_magick_MagickImage_getImageAttribute
  (JNIEnv *, jobject, jstring);

/*
 * Class:     magick_MagickImage
 * Method:    setImageAttribute
 * Signature: (Ljava/lang/String;Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_magick_MagickImage_setImageAttribute
  (JNIEnv *, jobject, jstring, jstring);

/*
 * Class:     magick_MagickImage
 * Method:    blobToImage
 * Signature: (Lmagick/ImageInfo;[B)V
 */
JNIEXPORT void JNICALL Java_magick_MagickImage_blobToImage
  (JNIEnv *, jobject, jobject, jbyteArray);

/*
 * Class:     magick_MagickImage
 * Method:    imageToBlob
 * Signature: (Lmagick/ImageInfo;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_magick_MagickImage_imageToBlob
  (JNIEnv *, jobject, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    setUnits
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_magick_MagickImage_setUnits
  (JNIEnv *, jobject, jint);

/*
 * Class:     magick_MagickImage
 * Method:    getUnits
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_magick_MagickImage_getUnits
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    setXResolution
 * Signature: (D)V
 */
JNIEXPORT void JNICALL Java_magick_MagickImage_setXResolution
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     magick_MagickImage
 * Method:    getXResolution
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_magick_MagickImage_getXResolution
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    setYResolution
 * Signature: (D)V
 */
JNIEXPORT void JNICALL Java_magick_MagickImage_setYResolution
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     magick_MagickImage
 * Method:    getYResolution
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_magick_MagickImage_getYResolution
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    nextImage
 * Signature: ()Lmagick/MagickImage;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_nextImage
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    hasFrames
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_magick_MagickImage_hasFrames
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    getNumFrames
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_magick_MagickImage_getNumFrames
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    setColorProfile
 * Signature: (Lmagick/ProfileInfo;)V
 */
JNIEXPORT void JNICALL Java_magick_MagickImage_setColorProfile
  (JNIEnv *, jobject, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    getColorProfile
 * Signature: ()Lmagick/ProfileInfo;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_getColorProfile
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    setIptcProfile
 * Signature: (Lmagick/ProfileInfo;)V
 */
JNIEXPORT void JNICALL Java_magick_MagickImage_setIptcProfile
  (JNIEnv *, jobject, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    getIptcProfile
 * Signature: ()Lmagick/ProfileInfo;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_getIptcProfile
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    getGenericProfileCount
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_magick_MagickImage_getGenericProfileCount
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    getGenericProfile
 * Signature: (I)Lmagick/ProfileInfo;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_getGenericProfile
  (JNIEnv *, jobject, jint);

/*
 * Class:     magick_MagickImage
 * Method:    profileImage
 * Signature: (Ljava/lang/String;[B)Z
 */
JNIEXPORT jboolean JNICALL Java_magick_MagickImage_profileImage
  (JNIEnv *, jobject, jstring, jbyteArray);

/*
 * Class:     magick_MagickImage
 * Method:    setImageProfile
 * Signature: (Ljava/lang/String;[B)Z
 */
JNIEXPORT jboolean JNICALL Java_magick_MagickImage_setImageProfile
  (JNIEnv *, jobject, jstring, jbyteArray);

/*
 * Class:     magick_MagickImage
 * Method:    getImageProfile
 * Signature: (Ljava/lang/String;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_magick_MagickImage_getImageProfile
  (JNIEnv *, jobject, jstring);

/*
 * Class:     magick_MagickImage
 * Method:    montageImages
 * Signature: (Lmagick/MontageInfo;)Lmagick/MagickImage;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_montageImages
  (JNIEnv *, jobject, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    averageImages
 * Signature: ()Lmagick/MagickImage;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_averageImages
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    levelImage
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_magick_MagickImage_levelImage
  (JNIEnv *, jobject, jstring);

/*
 * Class:     magick_MagickImage
 * Method:    sizeBlob
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_magick_MagickImage_sizeBlob
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    setCompression
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_magick_MagickImage_setCompression
  (JNIEnv *, jobject, jint);

/*
 * Class:     magick_MagickImage
 * Method:    getCompression
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_magick_MagickImage_getCompression
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    getImageType
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_magick_MagickImage_getImageType
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    setBorderColor
 * Signature: (Lmagick/PixelPacket;)V
 */
JNIEXPORT void JNICALL Java_magick_MagickImage_setBorderColor
  (JNIEnv *, jobject, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    getBorderColor
 * Signature: ()Lmagick/PixelPacket;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_getBorderColor
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    setBackgroundColor
 * Signature: (Lmagick/PixelPacket;)V
 */
JNIEXPORT void JNICALL Java_magick_MagickImage_setBackgroundColor
  (JNIEnv *, jobject, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    getBackgroundColor
 * Signature: ()Lmagick/PixelPacket;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_getBackgroundColor
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    setDelay
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_magick_MagickImage_setDelay
  (JNIEnv *, jobject, jint);

/*
 * Class:     magick_MagickImage
 * Method:    getDelay
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_magick_MagickImage_getDelay
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    setDispose
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_magick_MagickImage_setDispose
  (JNIEnv *, jobject, jint);

/*
 * Class:     magick_MagickImage
 * Method:    getDispose
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_magick_MagickImage_getDispose
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    setIterations
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_magick_MagickImage_setIterations
  (JNIEnv *, jobject, jint);

/*
 * Class:     magick_MagickImage
 * Method:    getIterations
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_magick_MagickImage_getIterations
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    getColors
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_magick_MagickImage_getColors
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    getTotalColors
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_magick_MagickImage_getTotalColors
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    getColormap
 * Signature: (I)Lmagick/PixelPacket;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_getColormap__I
  (JNIEnv *, jobject, jint);

/*
 * Class:     magick_MagickImage
 * Method:    getColormap
 * Signature: ()[Lmagick/PixelPacket;
 */
JNIEXPORT jobjectArray JNICALL Java_magick_MagickImage_getColormap__
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    getOnePixel
 * Signature: (II)Lmagick/PixelPacket;
 */
JNIEXPORT jobject JNICALL Java_magick_MagickImage_getOnePixel
  (JNIEnv *, jobject, jint, jint);

/*
 * Class:     magick_MagickImage
 * Method:    signatureImage
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_magick_MagickImage_signatureImage
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    getQuality
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_magick_MagickImage_getQuality
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    setRenderingIntent
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_magick_MagickImage_setRenderingIntent
  (JNIEnv *, jobject, jint);

/*
 * Class:     magick_MagickImage
 * Method:    getRenderingIntent
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_magick_MagickImage_getRenderingIntent
  (JNIEnv *, jobject);

/*
 * Class:     magick_MagickImage
 * Method:    setMatte
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_magick_MagickImage_setMatte
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     magick_MagickImage
 * Method:    getMatte
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_magick_MagickImage_getMatte
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
